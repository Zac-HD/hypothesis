# coding=utf-8
#
# This file is part of Hypothesis, which may be found at
# https://github.com/HypothesisWorks/hypothesis-python
#
# Most of this work is copyright (C) 2013-2017 David R. MacIver
# (david@drmaciver.com), but it contains contributions by others. See
# CONTRIBUTING.rst for a full list of people who may hold copyright, and
# consult the git log if you need to determine who owns an individual
# contribution.
#
# This Source Code Form is subject to the terms of the Mozilla Public License,
# v. 2.0. If a copy of the MPL was not distributed with this file, You can
# obtain one at http://mozilla.org/MPL/2.0/.
#
# END HEADER

from __future__ import division, print_function, absolute_import

import pytest
import inspect
import contextlib

import hypothesis.errors
from hypothesis import given
from hypothesis.strategies import from_type
import hypothesis.strategies as st
from hypothesis.searchstrategy import types


@pytest.mark.parametrize('typ', types.type_strategy_mapping())
def test_resolve_concrete_types(typ):
    @given(from_type(typ))
    def inner(ex):
        assert isinstance(ex, typ)

    inner()




# DONE: test that all types generated by core strategies can be looked up
# DONE: strategies that accept elements keywords (list, tuple, set, etc)
core_strats = {}
for thing in dir(st):
    thing = getattr(st, thing)
    if inspect.isfunction(thing):
        with contextlib.suppress(hypothesis.errors.NoExamples, TypeError):
            try:
                strat = thing()
                strat.example()
            except hypothesis.errors.InvalidArgument:
                strat = thing(elements=st.integers())
                strat.example()
            core_strats[type(strat.example())] = strat

@pytest.mark.parametrize('typ', core_strats.keys())
def test_resolve_core_strategies(typ):
    @given(from_type(typ))
    def inner(ex):
        assert isinstance(ex, typ)

    inner()
